#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Immortalwrt - Xiaomi Router AX3000T

on:
  #Ëá™Âä®ÁºñËØëÔºöÊØèÂ§©Êó©‰∏ä4ÁÇπ
  # schedule:
  #   - cron: 0 20 * * *
  #ÊâãÂä®ÁºñËØë Âπ∂‰∏îÁõëÂê¨‰∫ã‰ª∂Ôºö[Immortal Source Code Update]
  repository_dispatch:
    types: [Immortal Source Code Update]
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: immortal-ax3000t.config
  DIY_P1_SH: diy-immortal-part1.sh
  DIY_P2_SH: diy-immortal-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_ONEFICHIER: true
  UPLOAD_DOWNLOADGG: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL https://raw.githubusercontent.com/NotNoneX/AutoBuild-OpenWrt/main/depends-ubuntu-2204)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to 1Fichier
      id: onefichier
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_ONEFICHIER == 'true' && !cancelled()
      run: |
        FILE_NAME=Einstar${FILE_DATE}${DEVICE_NAME}.tar.gz
        tar -zcvf ${FILE_NAME} -C ${FIRMWARE} .
        curl -fsSL git.io/file-transfer | sh
        ./transfer fic --no-progress ${FILE_NAME} 2>&1 | tee onefichier.log
        echo "::warning file=1fichier.com::$(cat onefichier.log | grep https)"
        echo "url=$(cat onefichier.log | grep ? | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to DownloadGG
      id: downloadgg
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_DOWNLOADGG == 'true' && !cancelled()
      run: |
        FILE_NAME=Einstar${FILE_DATE}${DEVICE_NAME}.tar.gz
        tar -zcvf ${FILE_NAME} -C ${FIRMWARE} .
        curl -fsSL git.io/file-transfer | sh
        ./transfer gg --no-progress ${FILE_NAME} 2>&1 | tee downloadgg.log
        echo "::warning file=download.gg::$(cat downloadgg.log | grep https)"
        echo "url=$(cat downloadgg.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=immortalwrt_$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "**Ê∫êÁ†ÅÔºö** ${{ env.REPO_URL }}" >> release.txt
        echo  "**ÂàÜÊîØÔºö** ${{ env.REPO_BRANCH }}" >> release.txt
        echo "**WIFIÂêçÔºö** Einstar" >> release.txt
        echo "**ÂêéÂè∞Âú∞ÂùÄÔºö** 192.168.1.2" >> release.txt
        echo "**ÈªòËÆ§ÁÆ°ÁêÜÁî®Êà∑Ôºö** root" >> release.txt
        echo "**ÈªòËÆ§ÁÆ°ÁêÜÂØÜÁ†ÅÔºö** Êó†" >> release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "üîó [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "üîó [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_ONEFICHIER = true ] && echo "üîó [1Fichier](${{ steps.onefichier.outputs.url }})" >> release.txt
        [ $UPLOAD_DOWNLOADGG = true ] && echo "üîó [DownloadGG](${{ steps.downloadgg.outputs.url }})" >> release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "Cowtransfer=${{ steps.cowtransfer.outputs.url }}" >> $GITHUB_OUTPUT
        [ $UPLOAD_WETRANSFER = true ] && echo "WeTransfer=${{ steps.wetransfer.outputs.url }}" >> $GITHUB_OUTPUT
        [ $UPLOAD_ONEFICHIER = true ] && echo "OneFichier=${{ steps.onefichier.outputs.url }}" >> $GITHUB_OUTPUT
        [ $UPLOAD_DOWNLOADGG = true ] && echo "DownloadGG=${{ steps.downloadgg.outputs.url }}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        
    - name: Bark-Push
      uses: harryzcy/action-bark@v2.0.2
      with:
          status: ${{ job.status }}
          # on_status: failure, cancelled # only run on these status
          title: AutoBuild-OpenWrt
          body: "${{ steps.tag.outputs.release_tag }}_AX3000TÁºñËØëÁªìÊùüÔºö${{ toJson(steps.tag.outputs) }}"
          device_key: ${{ secrets.BARK_DEVICE_KEY }}
          level: passive # iOS notification level 'active', 'timeSensitive' or 'passive', default to 'active'
          bark_server_url: ${{ secrets.BARK_SERVER_URL }}
      if: always() # Pick up events even if the job fails or is canceled.
      
    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.GH_TOKEN }}
        retain_days: 1
        keep_minimum_runs: 3

#    - name: Remove old Releases
      #uses: dev-drprasad/delete-older-releases@v0.1.0
      #if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      #with:
        #keep_latest: 3
        #delete_tags: true
      #env:
        #GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
    #repo: <owner>/<repoName> # defaults to current repo
        keep_latest: 3
    #keep_min_download_counts: 1 # Optional parameters
        delete_expired_data: 15 # Optional parameters
    #delete_tag_pattern: beta # defaults to ""
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
